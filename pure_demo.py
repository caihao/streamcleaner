import os
import numba
import numpy
import time
import pyroomacoustics as pra
from ssqueezepy import stft #for better analysis

#@numba.jit()
#def boxcar(M, sym=True):
#    a = [0.5, 0.5]
#    fac = numpy.linspace(-numpy.pi, numpy.pi, M)
#    w = numpy.zeros(M)
#    for k in range(len(a)):
#        w += a[k] * numpy.cos(k * fac)
#        return w

#@numba.jit()
#def hann(M, sym=True):
#    a = [0.5, 0.5]
#    fac = numpy.linspace(-numpy.pi, numpy.pi, M)
#    w = numpy.zeros(M)
#    for k in range(len(a)):
#        w += a[k] * numpy.cos(k * fac)
#    return w

@numba.jit()
def man(arr):
    med = numpy.nanmedian(arr[numpy.nonzero(arr)])
    return numpy.nanmedian(numpy.abs(arr - med))

@numba.jit()
def atd(arr):
    x = numpy.square(numpy.abs(arr - man(arr)))
    return numpy.sqrt(numpy.nanmean(x))

def runningMeanFast(x, N):
    return numpy.convolve(x, numpy.ones((N,))/N,mode="valid")

def moving_average(x, w):
    return numpy.convolve(x, numpy.ones(w), 'same') / w

#depending on presence of openblas, as fast as numba.  
def numpy_convolve_filter(data: numpy.ndarray):
   normal = data.copy()
   transposed = data.copy()
   transposed = transposed.T
   transposed_raveled = numpy.ravel(transposed)
   normal_raveled = numpy.ravel(normal)

   A =  runningMeanFast(transposed_raveled, 3)
   transposed_raveled[0] = (transposed_raveled[0] + (transposed_raveled[1] + transposed_raveled[2]) / 2) /3
   transposed_raveled[-1] = (transposed_raveled[-1] + (transposed_raveled[-2] + transposed_raveled[-3]) / 2)/3
   transposed_raveled[1:-1] = A 
   transposed = transposed.T


   A =  runningMeanFast(normal_raveled, 3)
   normal_raveled[0] = (normal_raveled[0] + (normal_raveled[1] + normal_raveled[2]) / 2) /3
   normal_raveled[-1] = (normal_raveled[-1] + (normal_raveled[-2] + normal_raveled[-3]) / 2)/3
   normal_raveled[1:-1] = A
   return (transposed + normal )/2

def numpyfilter_wrapper_50(data: numpy.ndarray):
  d = data.copy()
  for i in range(50):
    d = numpy_convolve_filter(d)
  return d

def moving_average(x, w):
    return numpy.convolve(x, numpy.ones(w), 'same') / w

def smoothpadded(data: numpy.ndarray):
  o = numpy.pad(data, data.size//2, mode='median')
  return moving_average(o,14)[data.size//2: -data.size//2]

@numba.jit()
def threshold(data: numpy.ndarray):
 return numpy.sqrt(numpy.nanmean(numpy.square(numpy.abs(data -numpy.nanmedian(numpy.abs(data - numpy.nanmedian(data[numpy.nonzero(data)]))))))) + numpy.nanmedian(data[numpy.nonzero(data)])

def generate_true_logistic(points):
    fprint = numpy.linspace(0.0,1.0,points)
    fprint[1:-1]  /= 1 - fprint[1:-1]
    fprint[1:-1]  = numpy.log(fprint[1:-1])
    fprint[-1] = ((2*fprint[-2])  - fprint[-3]) 
    fprint[0] = -fprint[-1]
    return numpy.interp(fprint, (fprint[0], fprint[-1]),  (0, 1))

def generate_logit(size,sym =True):
  if sym == False or size<32:
    print("not supported")
    return numpy.zeros(size)
  if size % 2:
    e = generate_true_logistic((size+1)//2)
    result = numpy.zeros(size)
    result[0:(size+1)//2] = e
    result[(size+1)//2:] = e[0:-1][::-1]
    return result
  else:
    e = generate_true_logistic(size//2)
    e = numpy.hstack(e,e[::-1])
    return e


@numba.njit()
def fast_entropy(data: numpy.ndarray):
   logit = numpy.asarray([0.,0.08805782,0.17611565,0.22947444,0.2687223,0.30031973,0.32715222,0.35076669,0.37209427,0.39174363,0.41013892,0.42759189,0.44434291,0.46058588,0.47648444,0.4921833,0.5078167,0.52351556,0.53941412,0.55565709,0.57240811,0.58986108,0.60825637,0.62790573,0.64923331,0.67284778,0.69968027,0.7312777,0.77052556,0.82388435,0.91194218,1.])
   entropy = numpy.zeros(data.shape[1])
   for each in numba.prange(data.shape[1]):
      d = data[:,each]
      d = numpy.interp(d, (d[0], d[-1]), (-0, +1))
      entropy[each] = 1 - numpy.corrcoef(d, logit)[0,1]
   return entropy


@numba.jit()
def fast_peaks(stft_:numpy.ndarray,entropy:numpy.ndarray,thresh:numpy.float64,entropy_unmasked:numpy.ndarray):
    #0.01811 practical lowest
    #0.595844362 practical highest
    mask = numpy.zeros_like(stft_)
    for each in numba.prange(stft_.shape[1]):
        data = stft_[:,each]
        if entropy[each] == 0:
            mask[0:32,each] =  0
            continue #skip the calculations for this row, it's masked already
        constant = atd(data) + man(data)  #by inlining the calls higher in the function, it only ever sees arrays of one size and shape, which optimizes the code
        test = entropy_unmasked[each]  / 0.595844362
        test = abs(test - 1) 
        thresh1 = (thresh*test)
        if numpy.isnan(thresh1):
            thresh1 = constant #catch errors
        constant = (thresh1+constant)/2
        data[data<constant] = 0
        data[data>0] = 1
        mask[0:32,each] = data[:]
    return mask


@numba.jit()
def threshhold(arr):
  return (atd(arr)+ numpy.nanmedian(arr[numpy.nonzero(arr)])) 

@numba.jit()
def longestConsecutive(nums):
        longest_streak = 0
        streak = 0
        prevstreak = 0
        for num in range(nums.size):
          if nums[num] == 1:
            streak += 1
          if nums[num] == 0:
            prevstreak = max(streak,prevstreak)
            streak = 0
        return max(streak,prevstreak)
    
boxcar = numpy.asarray([0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5,0.5])
hann = numpy.asarray([0.00000000e+00,3.77965773e-05,1.51180595e-04,3.40134910e-04,6.04630957e-04,9.44628746e-04,1.36007687e-03,1.85091253e-03,2.41706151e-03,3.05843822e-03,3.77494569e-03,4.56647559e-03,5.43290826e-03,6.37411270e-03,7.38994662e-03,8.48025644e-03,9.64487731e-03,1.08836332e-02,1.21963367e-02,1.35827895e-02,1.50427819e-02,1.65760932e-02,1.81824916e-02,1.98617342e-02,2.16135671e-02,2.34377255e-02,2.53339336e-02,2.73019047e-02,2.93413412e-02,3.14519350e-02,3.36333667e-02,3.58853068e-02,3.82074146e-02,4.05993391e-02,4.30607187e-02,4.55911813e-02,4.81903443e-02,5.08578147e-02,5.35931893e-02,5.63960544e-02,5.92659864e-02,6.22025514e-02,6.52053053e-02,6.82737943e-02,7.14075543e-02,7.46061116e-02,7.78689827e-02,8.11956742e-02,8.45856832e-02,8.80384971e-02,9.15535940e-02,9.51304424e-02,9.87685015e-02,1.02467221e-01,1.06226043e-01,1.10044397e-01,1.13921708e-01,1.17857388e-01,1.21850843e-01,1.25901469e-01,1.30008654e-01,1.34171776e-01,1.38390206e-01,1.42663307e-01,1.46990432e-01,1.51370928e-01,1.55804131e-01,1.60289372e-01,1.64825973e-01,1.69413247e-01,1.74050502e-01,1.78737036e-01,1.83472140e-01,1.88255099e-01,1.93085190e-01,1.97961681e-01,2.02883837e-01,2.07850913e-01,2.12862158e-01,2.17916814e-01,2.23014117e-01,2.28153297e-01,2.33333576e-01,2.38554171e-01,2.43814294e-01,2.49113148e-01,2.54449933e-01,2.59823842e-01,2.65234062e-01,2.70679775e-01,2.76160159e-01,2.81674384e-01,2.87221617e-01,2.92801019e-01,2.98411747e-01,3.04052952e-01,3.09723782e-01,3.15423378e-01,3.21150881e-01,3.26905422e-01,3.32686134e-01,3.38492141e-01,3.44322565e-01,3.50176526e-01,3.56053138e-01,3.61951513e-01,3.67870760e-01,3.73809982e-01,3.79768282e-01,3.85744760e-01,3.91738511e-01,3.97748631e-01,4.03774209e-01,4.09814335e-01,4.15868096e-01,4.21934577e-01,4.28012860e-01,4.34102027e-01,4.40201156e-01,4.46309327e-01,4.52425614e-01,4.58549094e-01,4.64678841e-01,4.70813928e-01,4.76953428e-01,4.83096412e-01,4.89241951e-01,4.95389117e-01,5.01536980e-01,5.07684611e-01,5.13831080e-01,5.19975458e-01,5.26116815e-01,5.32254225e-01,5.38386758e-01,5.44513487e-01,5.50633486e-01,5.56745831e-01,5.62849596e-01,5.68943859e-01,5.75027699e-01,5.81100196e-01,5.87160431e-01,5.93207489e-01,5.99240456e-01,6.05258418e-01,6.11260467e-01,6.17245695e-01,6.23213197e-01,6.29162070e-01,6.35091417e-01,6.41000339e-01,6.46887944e-01,6.52753341e-01,6.58595644e-01,6.64413970e-01,6.70207439e-01,6.75975174e-01,6.81716305e-01,6.87429962e-01,6.93115283e-01,6.98771407e-01,7.04397480e-01,7.09992651e-01,7.15556073e-01,7.21086907e-01,7.26584315e-01,7.32047467e-01,7.37475536e-01,7.42867702e-01,7.48223150e-01,7.53541070e-01,7.58820659e-01,7.64061117e-01,7.69261652e-01,7.74421479e-01,7.79539817e-01,7.84615893e-01,7.89648938e-01,7.94638193e-01,7.99582902e-01,8.04482319e-01,8.09335702e-01,8.14142317e-01,8.18901439e-01,8.23612347e-01,8.28274329e-01,8.32886681e-01,8.37448705e-01,8.41959711e-01,8.46419017e-01,8.50825950e-01,8.55179843e-01,8.59480037e-01,8.63725883e-01,8.67916738e-01,8.72051970e-01,8.76130952e-01,8.80153069e-01,8.84117711e-01,8.88024281e-01,8.91872186e-01,8.95660845e-01,8.99389686e-01,9.03058145e-01,9.06665667e-01,9.10211707e-01,9.13695728e-01,9.17117204e-01,9.20475618e-01,9.23770461e-01,9.27001237e-01,9.30167455e-01,9.33268638e-01,9.36304317e-01,9.39274033e-01,9.42177336e-01,9.45013788e-01,9.47782960e-01,9.50484434e-01,9.53117800e-01,9.55682662e-01,9.58178630e-01,9.60605328e-01,9.62962389e-01,9.65249456e-01,9.67466184e-01,9.69612237e-01,9.71687291e-01,9.73691033e-01,9.75623159e-01,9.77483377e-01,9.79271407e-01,9.80986977e-01,9.82629829e-01,9.84199713e-01,9.85696393e-01,9.87119643e-01,9.88469246e-01,9.89745000e-01,9.90946711e-01,9.92074198e-01,9.93127290e-01,9.94105827e-01,9.95009663e-01,9.95838660e-01,9.96592693e-01,9.97271648e-01,9.97875422e-01,9.98403924e-01,9.98857075e-01,9.99234805e-01,9.99537058e-01,9.99763787e-01,9.99914959e-01,9.99990551e-01,9.99990551e-01,9.99914959e-01,9.99763787e-01,9.99537058e-01,9.99234805e-01,9.98857075e-01,9.98403924e-01,9.97875422e-01,9.97271648e-01,9.96592693e-01,9.95838660e-01,9.95009663e-01,9.94105827e-01,9.93127290e-01,9.92074198e-01,9.90946711e-01,9.89745000e-01,9.88469246e-01,9.87119643e-01,9.85696393e-01,9.84199713e-01,9.82629829e-01,9.80986977e-01,9.79271407e-01,9.77483377e-01,9.75623159e-01,9.73691033e-01,9.71687291e-01,9.69612237e-01,9.67466184e-01,9.65249456e-01,9.62962389e-01,9.60605328e-01,9.58178630e-01,9.55682662e-01,9.53117800e-01,9.50484434e-01,9.47782960e-01,9.45013788e-01,9.42177336e-01,9.39274033e-01,9.36304317e-01,9.33268638e-01,9.30167455e-01,9.27001237e-01,9.23770461e-01,9.20475618e-01,9.17117204e-01,9.13695728e-01,9.10211707e-01,9.06665667e-01,9.03058145e-01,8.99389686e-01,8.95660845e-01,8.91872186e-01,8.88024281e-01,8.84117711e-01,8.80153069e-01,8.76130952e-01,8.72051970e-01,8.67916738e-01,8.63725883e-01,8.59480037e-01,8.55179843e-01,8.50825950e-01,8.46419017e-01,8.41959711e-01,8.37448705e-01,8.32886681e-01,8.28274329e-01,8.23612347e-01,8.18901439e-01,8.14142317e-01,8.09335702e-01,8.04482319e-01,7.99582902e-01,7.94638193e-01,7.89648938e-01,7.84615893e-01,7.79539817e-01,7.74421479e-01,7.69261652e-01,7.64061117e-01,7.58820659e-01,7.53541070e-01,7.48223150e-01,7.42867702e-01,7.37475536e-01,7.32047467e-01,7.26584315e-01,7.21086907e-01,7.15556073e-01,7.09992651e-01,7.04397480e-01,6.98771407e-01,6.93115283e-01,6.87429962e-01,6.81716305e-01,6.75975174e-01,6.70207439e-01,6.64413970e-01,6.58595644e-01,6.52753341e-01,6.46887944e-01,6.41000339e-01,6.35091417e-01,6.29162070e-01,6.23213197e-01,6.17245695e-01,6.11260467e-01,6.05258418e-01,5.99240456e-01,5.93207489e-01,5.87160431e-01,5.81100196e-01,5.75027699e-01,5.68943859e-01,5.62849596e-01,5.56745831e-01,5.50633486e-01,5.44513487e-01,5.38386758e-01,5.32254225e-01,5.26116815e-01,5.19975458e-01,5.13831080e-01,5.07684611e-01,5.01536980e-01,4.95389117e-01,4.89241951e-01,4.83096412e-01,4.76953428e-01,4.70813928e-01,4.64678841e-01,4.58549094e-01,4.52425614e-01,4.46309327e-01,4.40201156e-01,4.34102027e-01,4.28012860e-01,4.21934577e-01,4.15868096e-01,4.09814335e-01,4.03774209e-01,3.97748631e-01,3.91738511e-01,3.85744760e-01,3.79768282e-01,3.73809982e-01,3.67870760e-01,3.61951513e-01,3.56053138e-01,3.50176526e-01,3.44322565e-01,3.38492141e-01,3.32686134e-01,3.26905422e-01,3.21150881e-01,3.15423378e-01,3.09723782e-01,3.04052952e-01,2.98411747e-01,2.92801019e-01,2.87221617e-01,2.81674384e-01,2.76160159e-01,2.70679775e-01,2.65234062e-01,2.59823842e-01,2.54449933e-01,2.49113148e-01,2.43814294e-01,2.38554171e-01,2.33333576e-01,2.28153297e-01,2.23014117e-01,2.17916814e-01,2.12862158e-01,2.07850913e-01,2.02883837e-01,1.97961681e-01,1.93085190e-01,1.88255099e-01,1.83472140e-01,1.78737036e-01,1.74050502e-01,1.69413247e-01,1.64825973e-01,1.60289372e-01,1.55804131e-01,1.51370928e-01,1.46990432e-01,1.42663307e-01,1.38390206e-01,1.34171776e-01,1.30008654e-01,1.25901469e-01,1.21850843e-01,1.17857388e-01,1.13921708e-01,1.10044397e-01,1.06226043e-01,1.02467221e-01,9.87685015e-02,9.51304424e-02,9.15535940e-02,8.80384971e-02,8.45856832e-02,8.11956742e-02,7.78689827e-02,7.46061116e-02,7.14075543e-02,6.82737943e-02,6.52053053e-02,6.22025514e-02,5.92659864e-02,5.63960544e-02,5.35931893e-02,5.08578147e-02,4.81903443e-02,4.55911813e-02,4.30607187e-02,4.05993391e-02,3.82074146e-02,3.58853068e-02,3.36333667e-02,3.14519350e-02,2.93413412e-02,2.73019047e-02,2.53339336e-02,2.34377255e-02,2.16135671e-02,1.98617342e-02,1.81824916e-02,1.65760932e-02,1.50427819e-02,1.35827895e-02,1.21963367e-02,1.08836332e-02,9.64487731e-03,8.48025644e-03,7.38994662e-03,6.37411270e-03,5.43290826e-03,4.56647559e-03,3.77494569e-03,3.05843822e-03,2.41706151e-03,1.85091253e-03,1.36007687e-03,9.44628746e-04,6.04630957e-04,3.40134910e-04,1.51180595e-04,3.77965773e-05,0.00000000e+00])
logit_window = numpy.asarray([0.,0.05590667,0.11181333,0.14464919,0.16804013,0.18625637,0.20119997,0.21388557,0.22491881,0.23469034,0.24346692,0.2514388,0.25874646,0.26549659,0.27177213,0.27763882,0.28314967,0.28834802,0.2932698,0.29794509,0.30239936,0.30665433,0.31072869,0.31463866,0.31839837,0.32202023,0.32551518,0.32889293,0.33216214,0.33533054,0.3384051,0.34139207,0.34429715,0.34712548,0.34988176,0.35257028,0.35519495,0.35775939,0.36026692,0.36272059,0.36512323,0.36747746,0.36978573,0.37205028,0.37427323,0.37645655,0.37860207,0.38071152,0.3827865,0.38482855,0.38683907,0.38881941,0.39077084,0.39269455,0.39459167,0.39646327,0.39831036,0.40013389,0.40193478,0.4037139,0.40547206,0.40721004,0.4089286,0.41062845,0.41231027,0.4139747,0.41562237,0.41725387,0.41886977,0.42047061,0.42205693,0.42362923,0.42518798,0.42673365,0.4282667,0.42978755,0.43129661,0.43279429,0.43428097,0.43575703,0.43722282,0.43867871,0.44012502,0.44156207,0.4429902,0.44440971,0.44582088,0.44722402,0.44861941,0.45000731,0.451388,0.45276174,0.45412877,0.45548934,0.4568437,0.45819207,0.45953469,0.46087178,0.46220355,0.46353023,0.46485202,0.46616913,0.46748176,0.46879011,0.47009437,0.47139473,0.47269138,0.4739845,0.47527428,0.4765609,0.47784452,0.47912534,0.48040351,0.48167921,0.48295261,0.48422387,0.48549315,0.48676063,0.48802646,0.4892908,0.49055382,0.49181567,0.4930765,0.49433648,0.49559576,0.4968545,0.49811286,0.49937098,0.50062902,0.50188714,0.5031455,0.50440424,0.50566352,0.5069235,0.50818433,0.50944618,0.5107092,0.51197354,0.51323937,0.51450685,0.51577613,0.51704739,0.51832079,0.51959649,0.52087466,0.52215548,0.5234391,0.52472572,0.5260155,0.52730862,0.52860527,0.52990563,0.53120989,0.53251824,0.53383087,0.53514798,0.53646977,0.53779645,0.53912822,0.54046531,0.54180793,0.5431563,0.54451066,0.54587123,0.54723826,0.548612,0.54999269,0.55138059,0.55277598,0.55417912,0.55559029,0.5570098,0.55843793,0.55987498,0.56132129,0.56277718,0.56424297,0.56571903,0.56720571,0.56870339,0.57021245,0.5717333,0.57326635,0.57481202,0.57637077,0.57794307,0.57952939,0.58113023,0.58274613,0.58437763,0.5860253,0.58768973,0.58937155,0.5910714,0.59278996,0.59452794,0.5962861,0.59806522,0.59986611,0.60168964,0.60353673,0.60540833,0.60730545,0.60922916,0.61118059,0.61316093,0.61517145,0.6172135,0.61928848,0.62139793,0.62354345,0.62572677,0.62794972,0.63021427,0.63252254,0.63487677,0.63727941,0.63973308,0.64224061,0.64480505,0.64742972,0.65011824,0.65287452,0.65570285,0.65860793,0.6615949,0.66466946,0.66783786,0.67110707,0.67448482,0.67797977,0.68160163,0.68536134,0.68927131,0.69334567,0.69760064,0.70205491,0.7067302,0.71165198,0.71685033,0.72236118,0.72822787,0.73450341,0.74125354,0.7485612,0.75653308,0.76530966,0.77508119,0.78611443,0.79880003,0.81374363,0.83195987,0.85535081,0.88818667,0.94409333,1.,1.,0.94409333,0.88818667,0.85535081,0.83195987,0.81374363,0.79880003,0.78611443,0.77508119,0.76530966,0.75653308,0.7485612,0.74125354,0.73450341,0.72822787,0.72236118,0.71685033,0.71165198,0.7067302,0.70205491,0.69760064,0.69334567,0.68927131,0.68536134,0.68160163,0.67797977,0.67448482,0.67110707,0.66783786,0.66466946,0.6615949,0.65860793,0.65570285,0.65287452,0.65011824,0.64742972,0.64480505,0.64224061,0.63973308,0.63727941,0.63487677,0.63252254,0.63021427,0.62794972,0.62572677,0.62354345,0.62139793,0.61928848,0.6172135,0.61517145,0.61316093,0.61118059,0.60922916,0.60730545,0.60540833,0.60353673,0.60168964,0.59986611,0.59806522,0.5962861,0.59452794,0.59278996,0.5910714,0.58937155,0.58768973,0.5860253,0.58437763,0.58274613,0.58113023,0.57952939,0.57794307,0.57637077,0.57481202,0.57326635,0.5717333,0.57021245,0.56870339,0.56720571,0.56571903,0.56424297,0.56277718,0.56132129,0.55987498,0.55843793,0.5570098,0.55559029,0.55417912,0.55277598,0.55138059,0.54999269,0.548612,0.54723826,0.54587123,0.54451066,0.5431563,0.54180793,0.54046531,0.53912822,0.53779645,0.53646977,0.53514798,0.53383087,0.53251824,0.53120989,0.52990563,0.52860527,0.52730862,0.5260155,0.52472572,0.5234391,0.52215548,0.52087466,0.51959649,0.51832079,0.51704739,0.51577613,0.51450685,0.51323937,0.51197354,0.5107092,0.50944618,0.50818433,0.5069235,0.50566352,0.50440424,0.5031455,0.50188714,0.50062902,0.49937098,0.49811286,0.4968545,0.49559576,0.49433648,0.4930765,0.49181567,0.49055382,0.4892908,0.48802646,0.48676063,0.48549315,0.48422387,0.48295261,0.48167921,0.48040351,0.47912534,0.47784452,0.4765609,0.47527428,0.4739845,0.47269138,0.47139473,0.47009437,0.46879011,0.46748176,0.46616913,0.46485202,0.46353023,0.46220355,0.46087178,0.45953469,0.45819207,0.4568437,0.45548934,0.45412877,0.45276174,0.451388,0.45000731,0.44861941,0.44722402,0.44582088,0.44440971,0.4429902,0.44156207,0.44012502,0.43867871,0.43722282,0.43575703,0.43428097,0.43279429,0.43129661,0.42978755,0.4282667,0.42673365,0.42518798,0.42362923,0.42205693,0.42047061,0.41886977,0.41725387,0.41562237,0.4139747,0.41231027,0.41062845,0.4089286,0.40721004,0.40547206,0.4037139,0.40193478,0.40013389,0.39831036,0.39646327,0.39459167,0.39269455,0.39077084,0.38881941,0.38683907,0.38482855,0.3827865,0.38071152,0.37860207,0.37645655,0.37427323,0.37205028,0.36978573,0.36747746,0.36512323,0.36272059,0.36026692,0.35775939,0.35519495,0.35257028,0.34988176,0.34712548,0.34429715,0.34139207,0.3384051,0.33533054,0.33216214,0.32889293,0.32551518,0.32202023,0.31839837,0.31463866,0.31072869,0.30665433,0.30239936,0.29794509,0.2932698,0.28834802,0.28314967,0.27763882,0.27177213,0.26549659,0.25874646,0.2514388,0.24346692,0.23469034,0.22491881,0.21388557,0.20119997,0.18625637,0.16804013,0.14464919,0.11181333,0.05590667,0.])
#predefining our windows also saves some cycles 
#D. Griffin and J. Lim, Signal estimation from modified short-time Fourier transform, IEEE Trans. Acoustics, Speech, and Signal Process., vol. 32, no. 2, pp. 236-243, 1984.
#optimal synthesis window generated with pyroomacoustics using pyroomacoustics.transform.stft.compute_synthesis_window(stftwindow, hop)
inversehann = numpy.asarray([0.00000000e+00,3.78030066e-05,1.51252038e-04,3.40450015e-04,6.05557120e-04,9.46790886e-04,1.36442633e-03,1.85879609e-03,2.43029060e-03,3.07935830e-03,3.80650586e-03,4.61229840e-03,5.49735979e-03,6.46237292e-03,7.50808006e-03,8.63528310e-03,9.84484392e-03,1.11376849e-02,1.25147888e-02,1.39771999e-02,1.55260238e-02,1.71624279e-02,1.88876418e-02,2.07029580e-02,2.26097316e-02,2.46093812e-02,2.67033893e-02,2.88933020e-02,3.11807297e-02,3.35673479e-02,3.60548959e-02,3.86451786e-02,4.13400654e-02,4.41414910e-02,4.70514548e-02,5.00720215e-02,5.32053198e-02,5.64535432e-02,5.98189487e-02,6.33038569e-02,6.69106510e-02,7.06417760e-02,7.44997374e-02,7.84871005e-02,8.26064885e-02,8.68605817e-02,9.12521144e-02,9.57838740e-02,1.00458698e-01,1.05279471e-01,1.10249123e-01,1.15370625e-01,1.20646985e-01,1.26081244e-01,1.31676477e-01,1.37435774e-01,1.43362253e-01,1.49459039e-01,1.55729266e-01,1.62176068e-01,1.68802572e-01,1.75611884e-01,1.82607092e-01,1.89791248e-01,1.97167359e-01,2.04738380e-01,2.12507196e-01,2.20476619e-01,2.28649369e-01,2.37028057e-01,2.45615183e-01,2.54413106e-01,2.63424039e-01,2.72650026e-01,2.82092931e-01,2.91754409e-01,3.01635898e-01,3.11738596e-01,3.22063434e-01,3.32611067e-01,3.43381840e-01,3.54375777e-01,3.65592549e-01,3.77031460e-01,3.88691420e-01,4.00570918e-01,4.12668005e-01,4.24980273e-01,4.37504823e-01,4.50238254e-01,4.63176638e-01,4.76315494e-01,4.89649777e-01,5.03173861e-01,5.16881514e-01,5.30765890e-01,5.44819522e-01,5.59034297e-01,5.73401470e-01,5.87911634e-01,6.02554746e-01,6.17320106e-01,6.32196375e-01,6.47171583e-01,6.62233139e-01,6.77367847e-01,6.92561937e-01,7.07801070e-01,7.23070394e-01,7.38354562e-01,7.53637769e-01,7.68903805e-01,7.84136095e-01,7.99317749e-01,8.14431620e-01,8.29460363e-01,8.44386489e-01,8.59192436e-01,8.73860630e-01,8.88373559e-01,9.02713830e-01,9.16864254e-01,9.30807908e-01,9.44528204e-01,9.58008956e-01,9.71234459e-01,9.84189542e-01,9.96859637e-01,1.00923083e+00,1.02128994e+00,1.03302454e+00,1.04442303e+00,1.05547466e+00,1.06616957e+00,1.07649885e+00,1.08645452e+00,1.09602959e+00,1.10521805e+00,1.11401487e+00,1.12241606e+00,1.13041858e+00,1.13802039e+00,1.14522044e+00,1.15201861e+00,1.15841572e+00,1.16441348e+00,1.17001448e+00,1.17522213e+00,1.18004063e+00,1.18447495e+00,1.18853076e+00,1.19221437e+00,1.19553272e+00,1.19849333e+00,1.20110420e+00,1.20337384e+00,1.20531115e+00,1.20692541e+00,1.20822622e+00,1.20922346e+00,1.20992724e+00,1.21034787e+00,1.21049579e+00,1.21038154e+00,1.21001576e+00,1.20940910e+00,1.20857221e+00,1.20751571e+00,1.20625017e+00,1.20478606e+00,1.20313374e+00,1.20130343e+00,1.19930521e+00,1.19714898e+00,1.19484443e+00,1.19240107e+00,1.18982820e+00,1.18713487e+00,1.18432990e+00,1.18142188e+00,1.17841915e+00,1.17532979e+00,1.17216161e+00,1.16892220e+00,1.16561885e+00,1.16225863e+00,1.15884831e+00,1.15539445e+00,1.15190332e+00,1.14838096e+00,1.14483316e+00,1.14126548e+00,1.13768321e+00,1.13409146e+00,1.13049506e+00,1.12689866e+00,1.12330667e+00,1.11972332e+00,1.11615261e+00,1.11259837e+00,1.10906423e+00,1.10555363e+00,1.10206984e+00,1.09861598e+00,1.09519497e+00,1.09180962e+00,1.08846255e+00,1.08515625e+00,1.08189309e+00,1.07867528e+00,1.07550491e+00,1.07238398e+00,1.06931433e+00,1.06629772e+00,1.06333580e+00,1.06043012e+00,1.05758213e+00,1.05479319e+00,1.05206460e+00,1.04939753e+00,1.04679312e+00,1.04425242e+00,1.04177640e+00,1.03936599e+00,1.03702202e+00,1.03474532e+00,1.03253660e+00,1.03039656e+00,1.02832585e+00,1.02632505e+00,1.02439472e+00,1.02253537e+00,1.02074746e+00,1.01903144e+00,1.01738771e+00,1.01581664e+00,1.01431856e+00,1.01289380e+00,1.01154263e+00,1.01026532e+00,1.00906210e+00,1.00793319e+00,1.00687879e+00,1.00589908e+00,1.00499420e+00,1.00416430e+00,1.00340951e+00,1.00272993e+00,1.00212565e+00,1.00159677e+00,1.00114334e+00,1.00076541e+00,1.00046304e+00,1.00023625e+00,1.00008505e+00,1.00000945e+00,1.00000945e+00,1.00008505e+00,1.00023625e+00,1.00046304e+00,1.00076541e+00,1.00114334e+00,1.00159677e+00,1.00212565e+00,1.00272993e+00,1.00340951e+00,1.00416430e+00,1.00499420e+00,1.00589908e+00,1.00687879e+00,1.00793319e+00,1.00906210e+00,1.01026532e+00,1.01154263e+00,1.01289380e+00,1.01431856e+00,1.01581664e+00,1.01738771e+00,1.01903144e+00,1.02074746e+00,1.02253537e+00,1.02439472e+00,1.02632505e+00,1.02832585e+00,1.03039656e+00,1.03253660e+00,1.03474532e+00,1.03702202e+00,1.03936599e+00,1.04177640e+00,1.04425242e+00,1.04679312e+00,1.04939753e+00,1.05206460e+00,1.05479319e+00,1.05758213e+00,1.06043012e+00,1.06333580e+00,1.06629772e+00,1.06931433e+00,1.07238398e+00,1.07550491e+00,1.07867528e+00,1.08189309e+00,1.08515625e+00,1.08846255e+00,1.09180962e+00,1.09519497e+00,1.09861598e+00,1.10206984e+00,1.10555363e+00,1.10906423e+00,1.11259837e+00,1.11615261e+00,1.11972332e+00,1.12330667e+00,1.12689866e+00,1.13049506e+00,1.13409146e+00,1.13768321e+00,1.14126548e+00,1.14483316e+00,1.14838096e+00,1.15190332e+00,1.15539445e+00,1.15884831e+00,1.16225863e+00,1.16561885e+00,1.16892220e+00,1.17216161e+00,1.17532979e+00,1.17841915e+00,1.18142188e+00,1.18432990e+00,1.18713487e+00,1.18982820e+00,1.19240107e+00,1.19484443e+00,1.19714898e+00,1.19930521e+00,1.20130343e+00,1.20313374e+00,1.20478606e+00,1.20625017e+00,1.20751571e+00,1.20857221e+00,1.20940910e+00,1.21001576e+00,1.21038154e+00,1.21049579e+00,1.21034787e+00,1.20992724e+00,1.20922346e+00,1.20822622e+00,1.20692541e+00,1.20531115e+00,1.20337384e+00,1.20110420e+00,1.19849333e+00,1.19553272e+00,1.19221437e+00,1.18853076e+00,1.18447495e+00,1.18004063e+00,1.17522213e+00,1.17001448e+00,1.16441348e+00,1.15841572e+00,1.15201861e+00,1.14522044e+00,1.13802039e+00,1.13041858e+00,1.12241606e+00,1.11401487e+00,1.10521805e+00,1.09602959e+00,1.08645452e+00,1.07649885e+00,1.06616957e+00,1.05547466e+00,1.04442303e+00,1.03302454e+00,1.02128994e+00,1.00923083e+00,9.96859637e-01,9.84189542e-01,9.71234459e-01,9.58008956e-01,9.44528204e-01,9.30807908e-01,9.16864254e-01,9.02713830e-01,8.88373559e-01,8.73860630e-01,8.59192436e-01,8.44386489e-01,8.29460363e-01,8.14431620e-01,7.99317749e-01,7.84136095e-01,7.68903805e-01,7.53637769e-01,7.38354562e-01,7.23070394e-01,7.07801070e-01,6.92561937e-01,6.77367847e-01,6.62233139e-01,6.47171583e-01,6.32196375e-01,6.17320106e-01,6.02554746e-01,5.87911634e-01,5.73401470e-01,5.59034297e-01,5.44819522e-01,5.30765890e-01,5.16881514e-01,5.03173861e-01,4.89649777e-01,4.76315494e-01,4.63176638e-01,4.50238254e-01,4.37504823e-01,4.24980273e-01,4.12668005e-01,4.00570918e-01,3.88691420e-01,3.77031460e-01,3.65592549e-01,3.54375777e-01,3.43381840e-01,3.32611067e-01,3.22063434e-01,3.11738596e-01,3.01635898e-01,2.91754409e-01,2.82092931e-01,2.72650026e-01,2.63424039e-01,2.54413106e-01,2.45615183e-01,2.37028057e-01,2.28649369e-01,2.20476619e-01,2.12507196e-01,2.04738380e-01,1.97167359e-01,1.89791248e-01,1.82607092e-01,1.75611884e-01,1.68802572e-01,1.62176068e-01,1.55729266e-01,1.49459039e-01,1.43362253e-01,1.37435774e-01,1.31676477e-01,1.26081244e-01,1.20646985e-01,1.15370625e-01,1.10249123e-01,1.05279471e-01,1.00458698e-01,9.57838740e-02,9.12521144e-02,8.68605817e-02,8.26064885e-02,7.84871005e-02,7.44997374e-02,7.06417760e-02,6.69106510e-02,6.33038569e-02,5.98189487e-02,5.64535432e-02,5.32053198e-02,5.00720215e-02,4.70514548e-02,4.41414910e-02,4.13400654e-02,3.86451786e-02,3.60548959e-02,3.35673479e-02,3.11807297e-02,2.88933020e-02,2.67033893e-02,2.46093812e-02,2.26097316e-02,2.07029580e-02,1.88876418e-02,1.71624279e-02,1.55260238e-02,1.39771999e-02,1.25147888e-02,1.11376849e-02,9.84484392e-03,8.63528310e-03,7.50808006e-03,6.46237292e-03,5.49735979e-03,4.61229840e-03,3.80650586e-03,3.07935830e-03,2.43029060e-03,1.85879609e-03,1.36442633e-03,9.46790886e-04,6.05557120e-04,3.40450015e-04,1.51252038e-04,3.78030066e-05,0.00000000e+00])
#note: this window does not create perfect reconstruction of output from input.
#https://ieeexplore.ieee.org/document/1164317
#consult this paper to understand better, or compare results with the use of the hann and inversehann windows respectively in istft.
def denoise(data: numpy.ndarray):

    #24000/256 = 93.75 hz per frequency bin.
    #a 4000 hz window(the largest for SSB is roughly 43 bins.
    #https://en.wikipedia.org/wiki/Voice_frequency
    #however, practically speaking, voice frequency cuts off just above 3400hz.
    #*most* SSB channels are constrained far below this.
    #to catch most voice activity on shortwave, we use the first 32 bins, or 3000hz.
    #we automatically set all other bins to the residue value.
    #reconstruction or upsampling of this reduced bandwidth signal is a different problem we dont solve here.
 
    data= numpy.asarray(data,dtype=float) #correct byte order of array   
    lettuce_euler_macaroni = 0.0596347362323194074341078499369279376074

    stft_logit = stft(x=data,window=logit_window,n_fft=512,hop_len=128)
    stft_vl =  numpy.abs(stft_logit) #returns the same as other methods
    stft_hann = stft(x=data,window=hann,n_fft=512,hop_len=128) #get complex representation
    stft_vh =  numpy.abs(stft_hann) #returns the same as other methods

    stft_vl  = stft_vl[0:32,:] #obtain the desired bins
    stft_vl = numpy.sort(stft_vl,axis=0) #sort the array

    entropy_unmasked = fast_entropy(stft_vl)
    entropy = smoothpadded(entropy_unmasked)
    factor = numpy.max(entropy)

    if factor < lettuce_euler_macaroni: 
      return stft_vh.T * 0

    entropy[entropy<lettuce_euler_macaroni] = 0
    entropy[entropy>0] = 1
    nbins = numpy.sum(entropy)
    maxstreak = longestConsecutive(entropy)


    #ok, so the shortest vowels are still over 100ms long. That's around 37.59 samples. Call it 38.
    #half of 38 is, go figure, 17.
    #now we do have an issue- what if a vowel is being pronounced in the middle of transition?
    #this *could* result in the end or beginning of words being truncated, but with this criteria,
    #we reasonably establish that there are no regions as long as half a vowel.
    #if there's really messed up speech(hence small segments) but enough of it(hence 22 bins)
    #then we can consider the frame to consist of speech
    
    # an ionosound sweep is also around or better than 24 samples, also
    if nbins<22 and maxstreak<16:
      return stft_vh.T * 0
          
    mask=numpy.zeros_like(stft_vh)
    thresh = threshold(stft_vh[stft_vh>man(stft_vl.flatten())])
    mask[0:32,:] = fast_peaks(stft_vh[0:32,:],entropy,thresh,entropy_unmasked)
     
    
    mask = numpyfilter_wrapper_50(mask)
    return mask.T


def padarray(A, size):
    t = size - len(A)
    return numpy.pad(A, pad_width=(0, t), mode='constant',constant_values=numpy.std(A))

def chunks(l, n):
    """Yield successive n-sized chunks from l."""
    for i in range(0, len(l), n):
        yield l[i:i + n]

def process_data(data: numpy.ndarray):
    print("processing ", data.size / rate, " seconds long file at ", rate, " rate.")
    start = time.time()
    stft = pra.transform.STFT(512, hop=128, analysis_window=hann,synthesis_window=inversehann,online=True)
    processed = []
    for each in chunks(data, rate):
        if each.size == rate:
            stft.analysis(each)
            mask = denoise(each)
            processed.append(stft.synthesis(mask*stft.X))
        else:
            psize = each.size
            working = padarray(each, rate)
            stft.analysis(working)
            working = denoise(working)
            processed.append(stft.synthesis(mask*stft.X)[0:psize])
    end = time.time()
    print("took ", end - start, " to process ", data.size / rate)
    return numpy.concatenate((processed), axis=0)   
